library(ggplot2)
library(dplyr)
library(readxl)
library(tidyverse)
library(Sleuth2)
library(reshape2)
library(stringi)
library(rlist)
library(rsconnect)
library(shiny)

ui <- fluidPage(
  shinythemes::themeSelector(),
  titlePanel("IEDA Volunteer stats"),
  
  sidebarLayout(
    
    sidebarPanel(
      #I need: names of each of the files, 
      #   columns for org, num_vol, and survey year, 
      #   labels for x axis, y axis, and title, 
      #   what colors should the bars be? RANDOMIZE!
      #   names for the PDF to be created
      #   name of the directory to select from
      fileInput("file1", "Upload Excel Files", multiple = TRUE), 
      uiOutput("sel_year"),
      uiOutput("sel_org"),
      uiOutput("sel_vols"),
      uiOutput("head_org"), 
      uiOutput("head_vols"),
      textInput(inputId = "org_label", label = "X axis label"), 
      textInput(inputId = "vols_label", label = "Y axis label"), 
      textInput(inputId = "plot_title", label = "Chart title"),
      textInput(inputId = "pdf_title", label = "PDF title")), 
      
    mainPanel(
      plotOutput(
        outputId = "histogram")
    )
  )
)

server <- function(input, output) {
  output$sel_year <- renderUI({
    req(input$file1)
    message('-- Entering renderUI output$sel_year')
    lapply(input$file1$datapath, function(file) {
      textInput("year1", label = "Year", placeholder = "What year(s) does this survey cover?")
    })
  })
  output$sel_org <- renderUI({
    req(input$file1)
    message('-- Entering renderUI output$sel_org')
    lapply(input$file1$datapath, function(file) {
      selectInput("org_col1", "Which column has the organization name?", choices = colnames(read_excel(file)), label = "Organization")
    })      
  })
  output$head_org <- renderUI({
    req(input$file1)
    message('-- Entering renderUI output$sel_org')
    lapply(input$file1$datapath, function(file) {
      numericInput("header_orgs", "Optional: header rows - Organizations", 3)
    })      
  })
  output$sel_vols <- renderUI({
    req(input$file1)
    message('-- Entering renderUI output$sel_vols')
    print(input$file1)
    lapply(input$file1$datapath, function(file) {
      selectInput("num_vols1", "Which column has the relevant metric?", choices = colnames(read_excel(file)), label = "Number of Volunteers")
    })
  })
  output$head_vols <- renderUI({
    req(input$file1)
    message('-- Entering renderUI output$sel_org')
    lapply(input$file1$datapath, function(file) {
      numericInput("header_vols", "Optional: header rows  - Volunteers", 3)
    })      
  })

  plot_data <- reactive({
    req(input$org_col1)
    req(input$num_vols1)
    req(input$year1)
    req(input$header_orgs)
    req(input$header_vols)
    message('-- Cleaning data...')
    lapply(input$file1$datapath, function(x) {
      how_many <- data.frame(c(1:length(input$file1)))
      file <- read_excel(x)
      org <- file[input$org_col1]
      org <- org[input$header_orgs:length(org)]
      print(org)
      num_vols <- stri_extract_all_regex(file[input$num_vols1], "[0-9]+")
      num_vols <- as.numeric(unlist(num_vols))
      num_vols <- num_vols[input$header_vols:length(num_vols)]
      num_vols <- num_vols[num_vols != min(input$year1) & num_vols != max(input$year1) & num_vols > 30]
      print(num_vols)
      survey <- rep(input$year1, times = length(org))      
      print(survey)
      message('-- Creating new dataframe...')
      file <- data.frame(org, num_vols, survey)
      file <- file[complete.cases(file), ]
      file <- arrange(file)
      print(file)
    })
    do.call(rbind, file)
  })
  output$histogram <- renderPlot({ 
    req(input$plot_title)
    req(input$pdf_title)
    message("Plotting data in a histogram...")
    ggplot(data = plot_data(), aes(x = org, y = num_vols, fill = survey, color = survey)) +
      geom_bar(position = "dodge", stat = "identity") +
      scale_size_area() + 
      scale_color_manual(values = rep("black", length(survey))) +
      scale_fill_manual(values = randomColor(count = length(survey))) +
      xlab(input$org_label) +
      ylab(input$vols_label) +
      scale_x_discrete(labels = function(x){str_wrap(x, width = 10)}) +
      ggtitle(input$plot_title)+
      geom_text(aes(label=num_vols,vjust=-0.33333), position = position_dodge(width = .9)) 
      ggsave(filename = input$pdf_title, device = "pdf")

  })
}

shinyApp(ui = ui, server = server)
